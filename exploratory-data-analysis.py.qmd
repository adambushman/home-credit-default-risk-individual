---
title: "Home Credit Default Risk"
subtitle: "Part 1 | Exploratory Data Analysis | IS 6812"
author: "Adam Bushman (u6049169)"
date: "8/14/2024"
format: 
    html:
        toc: true
        embed-resources: true
editor:
    render-on-save: true
---

# Introduction

For this exploratory data analysis, I plan to use the following languages, APIs, and tools:

*   [Quarto](https://quarto.org/): probably "the" notebook of choice for the scientific community; built and maintained by Posit, it's flexible, powerful, and beautiful.
*   [Python](https://www.python.org/): I usually default to R for analytical tasks so I could use the extra practice in Python.
*   [DuckDB](https://duckdb.org/): an in-process analytical database engine. It is extremely fast and features a convenient syntax. It's gathered tremendous steam in the industry, even for analysis tasks.
*   [Observable Plot](https://observablehq.com/plot/): from the same minds that brought the revolutionary D3.js library, comes a simplified wrapper called Observable Plot. It's highly flexible without being overly verbose; Quarto offers naitive support.

::: {layout="[[3,4,4,7]]" layout-valign="center"}
![](https://quarto-dev.github.io/quarto-r/logo.png)

![](https://duckdb.org/images/logo-dl/DuckDB_Logo.png)

![](https://quantumzeitgeist.com/wp-content/uploads/pythoned.png)

![](plot-logo.png)
::::

# Analysis Preparation

We'll start off importing `duckdb`. We'll do much of data processing work using this powerful SQL engine.

```{python}

import duckdb

```

With access to the API, we can begin to query our data located in files. We need only setup "relations" (informing `duckdb` where the files are located).

```{python .duck-db-relations}
#| output: false

# DuckDB relations
# These are tables against which we can query using the DuckDB API

duckdb.read_csv("data/application_test.csv")
duckdb.read_csv("data/application_train.csv")
duckdb.read_csv("data/bureau_balance.csv")
duckdb.read_csv("data/bureau.csv")
duckdb.read_csv("data/credit_card_balance.csv")
duckdb.read_csv("data/installments_payments.csv")
duckdb.read_csv("data/POS_CASH_balance.csv")
duckdb.read_csv("data/previous_application.csv")

```

With a simple query, we can look at the first 10 rows of the `bureau.csv` file.

```{python}

duckdb.sql("SELECT * FROM 'data/bureau.csv' LIMIT 10").show()

```

DuckDB does a nice job styling the output and including helpful details, such as data types.


```{python}

import pandas as pd
import polars as pl

```

```{python .uj-data}

uj_roster = pd.DataFrame({
    "name": ["Lauri Markkanen", "Collin Sexton", "Keyonte George"], 
    "height_in": [85, 73, 75]
})

ojs_define(data = uj_roster)
```

```{python .test-python}
def greet(name):
    print(f'Hello {name}')

greet("Adam")

```

```{ojs}

Plot.plot({
    marks: [
        Plot.barY(transpose(data), {x: "name", y: "height_in", fill: "#4E008E"})
    ]
})

```